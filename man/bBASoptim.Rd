% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bBASoptim.R
\name{bBASoptim}
\alias{bBASoptim}
\title{Implementation of the binary BAS(bBAS) algorithm for optimization problems.}
\usage{
bBASoptim(fn, init = NULL, lower = c(-6, 0), upper = c(-1, 2),
  d0 = 1e-30, d1 = 3, eta_d = 0.99, w = 0.2, c = 0.5, n = 800,
  vmax = 4, seed = NULL, trace = 20, resolution = rep(1,
  length(lower)))
}
\arguments{
\item{fn}{objective function; function need to be optimized}

\item{init}{default = NULL, it will generate randomly; Of course, you can specify it. It should be noted
that you'd better specify an integer vector as init when dealing with 0-1 problem. If you don't mind the
the init vector is integer or double(numerical), just leave it alone.}

\item{lower}{lower of parameters to be estimated; Default = c(-6,0) because of the test on
Michalewicz function of which thelower is c(-6,0);}

\item{upper}{upper of parameters; Default = c(-1,2).}

\item{d0}{a constant to gurantee that sensing length of antennae \emph{d} doesn't equal to
zero. More specifically, \deqn{d^t = \eta_d * d^{t-1} + d_0}where attenuation coefficient
 \eqn{\eta_d} belongs to \eqn{[0,1]}}

\item{d1}{initial value of antenae length. You can specify it according to your problem scale}

\item{eta_d}{attenuation coefficient of sensing length of antennae}

\item{w}{the inertia term}

\item{c}{a constant belongs to (0,1).\deqn{V_i=wV_i \pm c*rand}}

\item{n}{iterations times}

\item{vmax}{maximum speed of beetle}

\item{seed}{random seed; default = NULL ; The results of BAS depend on random init value and random directions.
Therefore, if you set a random seed, for example,\code{seed = 1}, the results will remain the same
no matter how many times you repeat your experiments.}

\item{trace}{default = 20; it means the process is printed to the console every 10 iterations.}
}
\value{
A list including best beetle position (parameters) and corresponding objective function value.
}
\description{
bBAS is designed to solve the binary-integer-programming. It can also be employed on general
optimization problems.
}
\examples{
#======== examples start =======================
# BAS application on Michalewicz function
library(rBAS)
mich <- function(x){
  y1 <- -sin(x[1])*(sin((x[1]^2)/pi))^20
  y2 <- -sin(x[2])*(sin((2*x[2]^2)/pi))^20
  return(y1+y2)
}
fit <- bBASoptim(fn = mich,
                 init = c(-3,1),
                 resolution = rep(100,2),
                 trace = 20,
                 c = 0.6,
                 seed = 3)
fit$par;fit$value

#==============lot-sizing problem==============#
lot_size2 <- function(x){
  R = c(100,60,40,50,80)
  A = 100
  c = 1
  x1 = 1 - x

  I = rep(0,5)

  for(m in 1:4){
    t = 0
    for (p in (m+1):5){
      if(x1[p] == 1){
        t = t + R[p]
      }
      else{break}
    }
    I[m] = t
  }
  if(x[1]!=1){
    pen = 1e5
  }else{
    pen = 0
  }
  cost = sum(A*x) + sum(c*I) + pen

  return(cost)
}
fit <- bBASoptim(fn = lot_size2,
                 init = rep(1,5),
                 lower = rep(0,5),
                 upper = rep(1,5),
                 resolution = rep(1,5),
                 n = 200)
fit$par;fit$value
#======== examples end =======================
}
\references{
The algorithm is developed by Miss Ruan Yue. The documents or paper about bBAS will come soon.
}
